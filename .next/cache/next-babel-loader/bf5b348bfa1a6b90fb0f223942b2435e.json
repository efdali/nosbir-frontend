{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nexport const FETCHING_COMMENTS = \"FETCHING_COMMENTS\";\nexport const fetchingComments = () => ({\n  type: FETCHING_COMMENTS\n});\nexport const COMMENTS_FAIL = \"COMMENTS_FAIL\";\nexport const commentsFail = msg => ({\n  type: COMMENTS_FAIL,\n  msg\n});\nexport const COMMENTS_SUCCESS = \"COMMENTS_SUCCESS\";\nexport const commentsSuccess = (comments, total) => ({\n  type: COMMENTS_SUCCESS,\n  comments,\n  total\n});\nexport const fetchPostDetails = seo => async (dispatch, getState, http) => {\n  const post = await http.get(\"post_detay.php\", {\n    params: {\n      link: seo\n    }\n  }).then(res => res.data).then(res => {\n    if (res.durum) {\n      dispatch(commentsSuccess(res.yorum.data, res.yorum.sayi));\n      return res.post;\n    } else {\n      dispatch(commentsFail(res.mesaj));\n      return {};\n    }\n  }).catch(err => commentsFail(err));\n  return post;\n};\nexport const ADD_COMMENT = \"ADD_COMMENT\";\nexport const addComment = newComment => ({\n  type: ADD_COMMENT,\n  newComment\n});\nexport const shareComment = (comment, postId) => (dispatch, getState, http) => {\n  http.post(\"yorum_ekle.php\", {\n    icerik: comment,\n    postId: postId\n  }).then(res => res.data).then(res => {\n    console.log(res);\n\n    if (res.durum) {\n      const newComment = {\n        text: comment,\n        created_at: _Date$now(),\n        nick: getState().auth.user.kadi\n      };\n      dispatch(addComment(newComment));\n    } else {\n      console.log(\"hata\");\n    }\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["E:/projects/nosbir-frontend/store/actions/commentActions.js"],"names":["FETCHING_COMMENTS","fetchingComments","type","COMMENTS_FAIL","commentsFail","msg","COMMENTS_SUCCESS","commentsSuccess","comments","total","fetchPostDetails","seo","dispatch","getState","http","post","get","params","link","then","res","data","durum","yorum","sayi","mesaj","catch","err","ADD_COMMENT","addComment","newComment","shareComment","comment","postId","icerik","console","log","text","created_at","nick","auth","user","kadi"],"mappings":";AAAA,OAAO,MAAMA,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEF;AAAR,CAAP,CAAzB;AAEP,OAAO,MAAMG,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,YAAY,GAAGC,GAAG,KAAK;AAAEH,EAAAA,IAAI,EAAEC,aAAR;AAAuBE,EAAAA;AAAvB,CAAL,CAAxB;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,KAAX,MAAsB;AACnDP,EAAAA,IAAI,EAAEI,gBAD6C;AAEnDE,EAAAA,QAFmD;AAGnDC,EAAAA;AAHmD,CAAtB,CAAxB;AAMP,OAAO,MAAMC,gBAAgB,GAAGC,GAAG,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,IAA3B,KAAoC;AACzE,QAAMC,IAAI,GAAG,MAAMD,IAAI,CACpBE,GADgB,CACZ,gBADY,EACM;AACrBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEP;AADA;AADa,GADN,EAMhBQ,IANgB,CAMXC,GAAG,IAAIA,GAAG,CAACC,IANA,EAOhBF,IAPgB,CAOXC,GAAG,IAAI;AACX,QAAIA,GAAG,CAACE,KAAR,EAAe;AACbV,MAAAA,QAAQ,CAACL,eAAe,CAACa,GAAG,CAACG,KAAJ,CAAUF,IAAX,EAAiBD,GAAG,CAACG,KAAJ,CAAUC,IAA3B,CAAhB,CAAR;AACA,aAAOJ,GAAG,CAACL,IAAX;AACD,KAHD,MAGO;AACLH,MAAAA,QAAQ,CAACR,YAAY,CAACgB,GAAG,CAACK,KAAL,CAAb,CAAR;AACA,aAAO,EAAP;AACD;AACF,GAfgB,EAgBhBC,KAhBgB,CAgBVC,GAAG,IAAIvB,YAAY,CAACuB,GAAD,CAhBT,CAAnB;AAiBA,SAAOZ,IAAP;AACD,CAnBM;AAqBP,OAAO,MAAMa,WAAW,GAAC,aAAlB;AACP,OAAO,MAAMC,UAAU,GAACC,UAAU,KAAG;AAAC5B,EAAAA,IAAI,EAAC0B,WAAN;AAAkBE,EAAAA;AAAlB,CAAH,CAA3B;AACP,OAAO,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB,CAACrB,QAAD,EAAWC,QAAX,EAAqBC,IAArB,KAA8B;AAC7EA,EAAAA,IAAI,CACDC,IADH,CACQ,gBADR,EAC0B;AACtBmB,IAAAA,MAAM,EAAEF,OADc;AAEtBC,IAAAA,MAAM,EAAEA;AAFc,GAD1B,EAKGd,IALH,CAKQC,GAAG,IAAIA,GAAG,CAACC,IALnB,EAMGF,IANH,CAMQC,GAAG,IAAI;AACXe,IAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ;;AACA,QAAIA,GAAG,CAACE,KAAR,EAAe;AACb,YAAMQ,UAAU,GAAG;AACjBO,QAAAA,IAAI,EAAEL,OADW;AAEjBM,QAAAA,UAAU,EAAE,WAFK;AAGjBC,QAAAA,IAAI,EAAE1B,QAAQ,GAAG2B,IAAX,CAAgBC,IAAhB,CAAqBC;AAHV,OAAnB;AAKA9B,MAAAA,QAAQ,CAACiB,UAAU,CAACC,UAAD,CAAX,CAAR;AACD,KAPD,MAOK;AACHK,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AACF,GAlBH,EAmBGV,KAnBH,CAmBSC,GAAG,IAAEQ,OAAO,CAACC,GAAR,CAAYT,GAAZ,CAnBd;AAoBD,CArBM","sourcesContent":["export const FETCHING_COMMENTS = \"FETCHING_COMMENTS\";\r\nexport const fetchingComments = () => ({ type: FETCHING_COMMENTS });\r\n\r\nexport const COMMENTS_FAIL = \"COMMENTS_FAIL\";\r\nexport const commentsFail = msg => ({ type: COMMENTS_FAIL, msg });\r\n\r\nexport const COMMENTS_SUCCESS = \"COMMENTS_SUCCESS\";\r\nexport const commentsSuccess = (comments, total) => ({\r\n  type: COMMENTS_SUCCESS,\r\n  comments,\r\n  total\r\n});\r\n\r\nexport const fetchPostDetails = seo => async (dispatch, getState, http) => {\r\n  const post = await http\r\n    .get(\"post_detay.php\", {\r\n      params: {\r\n        link: seo\r\n      }\r\n    })\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      if (res.durum) {\r\n        dispatch(commentsSuccess(res.yorum.data, res.yorum.sayi));\r\n        return res.post;\r\n      } else {\r\n        dispatch(commentsFail(res.mesaj));\r\n        return {};\r\n      }\r\n    })\r\n    .catch(err => commentsFail(err));\r\n  return post;\r\n};\r\n\r\nexport const ADD_COMMENT=\"ADD_COMMENT\";\r\nexport const addComment=newComment=>({type:ADD_COMMENT,newComment});\r\nexport const shareComment = (comment, postId) => (dispatch, getState, http) => {\r\n  http\r\n    .post(\"yorum_ekle.php\", {\r\n      icerik: comment,\r\n      postId: postId\r\n    })\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      console.log(res);\r\n      if (res.durum) {\r\n        const newComment = {\r\n          text: comment,\r\n          created_at: Date.now(),\r\n          nick: getState().auth.user.kadi\r\n        };\r\n        dispatch(addComment(newComment));\r\n      }else{\r\n        console.log(\"hata\");\r\n      }\r\n    })\r\n    .catch(err=>console.log(err));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}