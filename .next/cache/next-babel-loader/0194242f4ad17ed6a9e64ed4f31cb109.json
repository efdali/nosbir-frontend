{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nexport var FETCHING_POSTS = \"FETCHING_POSTS\";\nexport var fetchingPosts = function fetchingPosts() {\n  return {\n    type: FETCHING_POSTS\n  };\n};\nexport var POSTS_FAIL = \"POSTS_FAIL\";\nexport var postsFail = function postsFail(msg) {\n  return {\n    type: POSTS_FAIL,\n    msg: msg\n  };\n};\nexport var POSTS_SUCCESS = \"POSTS_SUCCESS\";\nexport var postsSuccess = function postsSuccess(posts, total) {\n  return {\n    type: POSTS_SUCCESS,\n    posts: posts,\n    total: total\n  };\n};\nexport var fetchPosts = function fetchPosts() {\n  var group = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState, http) {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(fetchingPosts());\n                params = {\n                  s: page,\n                  topluluk: group ? group : null\n                };\n                http.get(\"postlar.php\", {\n                  params: params\n                }).then(function (res) {\n                  return res.data;\n                }).then(function (res) {\n                  if (res.durum) dispatch(postsSuccess(res.postlar, res.toplam));else dispatch(postsFail(res.mesaj));\n                })[\"catch\"](function (err) {\n                  return dispatch(postsFail(err));\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["E:/projects/nosbir-frontend/store/actions/postActions.js"],"names":["FETCHING_POSTS","fetchingPosts","type","POSTS_FAIL","postsFail","msg","POSTS_SUCCESS","postsSuccess","posts","total","fetchPosts","group","page","dispatch","getState","http","params","s","topluluk","get","then","res","data","durum","postlar","toplam","mesaj","err"],"mappings":";;AAAA,OAAO,IAAMA,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAO;AAAEC,IAAAA,IAAI,EAAEF;AAAR,GAAP;AAAA,CAAtB;AAEP,OAAO,IAAMG,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG;AAAA,SAAK;AAAEH,IAAAA,IAAI,EAAEC,UAAR;AAAoBE,IAAAA,GAAG,EAAHA;AAApB,GAAL;AAAA,CAArB;AAEP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,KAAR;AAAA,SAAmB;AAC7CP,IAAAA,IAAI,EAAEI,aADuC;AAE7CE,IAAAA,KAAK,EAALA,KAF6C;AAG7CC,IAAAA,KAAK,EAALA;AAH6C,GAAnB;AAAA,CAArB;AAMP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MAACC,KAAD,uEAAS,EAAT;AAAA,MAAaC,IAAb,uEAAoB,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA0B,iBAClDC,QADkD,EAElDC,QAFkD,EAGlDC,IAHkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAKlDF,gBAAAA,QAAQ,CAACZ,aAAa,EAAd,CAAR;AAEMe,gBAAAA,MAP4C,GAOnC;AACbC,kBAAAA,CAAC,EAAEL,IADU;AAEbM,kBAAAA,QAAQ,EAAEP,KAAK,GAAGA,KAAH,GAAW;AAFb,iBAPmC;AAYlDI,gBAAAA,IAAI,CACDI,GADH,CACO,aADP,EACsB;AAAEH,kBAAAA,MAAM,EAANA;AAAF,iBADtB,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAR;AAAA,iBAFX,EAGGF,IAHH,CAGQ,UAAAC,GAAG,EAAI;AACX,sBAAIA,GAAG,CAACE,KAAR,EAAeV,QAAQ,CAACN,YAAY,CAACc,GAAG,CAACG,OAAL,EAAcH,GAAG,CAACI,MAAlB,CAAb,CAAR,CAAf,KACKZ,QAAQ,CAACT,SAAS,CAACiB,GAAG,CAACK,KAAL,CAAV,CAAR;AACN,iBANH,WAOS,UAAAC,GAAG;AAAA,yBAAId,QAAQ,CAACT,SAAS,CAACuB,GAAD,CAAV,CAAZ;AAAA,iBAPZ;;AAZkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB","sourcesContent":["export const FETCHING_POSTS = \"FETCHING_POSTS\";\r\nexport const fetchingPosts = () => ({ type: FETCHING_POSTS });\r\n\r\nexport const POSTS_FAIL = \"POSTS_FAIL\";\r\nexport const postsFail = msg => ({ type: POSTS_FAIL, msg });\r\n\r\nexport const POSTS_SUCCESS = \"POSTS_SUCCESS\";\r\nexport const postsSuccess = (posts, total) => ({\r\n  type: POSTS_SUCCESS,\r\n  posts,\r\n  total\r\n});\r\n\r\nexport const fetchPosts = (group = \"\", page = 0) => async (\r\n  dispatch,\r\n  getState,\r\n  http\r\n) => {\r\n  dispatch(fetchingPosts());\r\n\r\n  const params = {\r\n    s: page,\r\n    topluluk: group ? group : null\r\n  };\r\n\r\n  http\r\n    .get(\"postlar.php\", { params })\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      if (res.durum) dispatch(postsSuccess(res.postlar, res.toplam));\r\n      else dispatch(postsFail(res.mesaj));\r\n    })\r\n    .catch(err => dispatch(postsFail(err)));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}