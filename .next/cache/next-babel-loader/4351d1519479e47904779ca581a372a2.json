{"ast":null,"code":"export function timeAgo(time) {\n  if (!time) {\n    return null;\n  }\n\n  const date = typeof time === \"object\" ? time : new Date(time);\n  const DAY_IN_MS = 86400000; // 24 * 60 * 60 * 1000\n\n  const today = new Date();\n  const yesterday = new Date(today - DAY_IN_MS);\n  const seconds = Math.round((today - date) / 1000);\n  const minutes = Math.round(seconds / 60);\n  const isToday = today.toDateString() === date.toDateString();\n  const isYesterday = yesterday.toDateString() === date.toDateString();\n  const isThisYear = today.getFullYear() === date.getFullYear();\n\n  if (seconds < 5) {\n    return \"şimdi\";\n  } else if (seconds < 60) {\n    return `${seconds} saniye önce`;\n  } else if (seconds < 90) {\n    return \"yaklaşık 1 dakika önce\";\n  } else if (minutes < 60) {\n    return `${minutes} dakika önce`;\n  } else if (isToday) {\n    return \"bugün\";\n  } else if (isYesterday) {\n    return \"dün\";\n  } else if (isThisYear) {\n    return getFormattedDate(date);\n  }\n\n  return \"bir seneden önce\";\n}\nconst MONTH_NAMES = [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"];\n\nfunction getFormattedDate(date) {\n  const day = date.getDate();\n  const month = MONTH_NAMES[date.getMonth()];\n  const year = date.getFullYear();\n  const hours = date.getHours();\n  let minutes = date.getMinutes();\n\n  if (minutes < 10) {\n    // Adding leading zero to minutes\n    minutes = `0${minutes}`;\n  }\n\n  return `${day}. ${month} ${hours}:${minutes}`;\n}","map":{"version":3,"sources":["E:/projects/nosbir-frontend/utils/helper.js"],"names":["timeAgo","time","date","Date","DAY_IN_MS","today","yesterday","seconds","Math","round","minutes","isToday","toDateString","isYesterday","isThisYear","getFullYear","getFormattedDate","MONTH_NAMES","day","getDate","month","getMonth","year","hours","getHours","getMinutes"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AAC5B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,QAAMC,IAAI,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,IAAIE,IAAJ,CAASF,IAAT,CAA/C;AACA,QAAMG,SAAS,GAAG,QAAlB,CAN4B,CAMA;;AAC5B,QAAMC,KAAK,GAAG,IAAIF,IAAJ,EAAd;AACA,QAAMG,SAAS,GAAG,IAAIH,IAAJ,CAASE,KAAK,GAAGD,SAAjB,CAAlB;AACA,QAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,KAAK,GAAGH,IAAT,IAAiB,IAA5B,CAAhB;AACA,QAAMQ,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAhB;AACA,QAAMI,OAAO,GAAGN,KAAK,CAACO,YAAN,OAAyBV,IAAI,CAACU,YAAL,EAAzC;AACA,QAAMC,WAAW,GAAGP,SAAS,CAACM,YAAV,OAA6BV,IAAI,CAACU,YAAL,EAAjD;AACA,QAAME,UAAU,GAAGT,KAAK,CAACU,WAAN,OAAwBb,IAAI,CAACa,WAAL,EAA3C;;AAEA,MAAIR,OAAO,GAAG,CAAd,EAAiB;AACf,WAAO,OAAP;AACD,GAFD,MAEO,IAAIA,OAAO,GAAG,EAAd,EAAkB;AACvB,WAAQ,GAAEA,OAAQ,cAAlB;AACD,GAFM,MAEA,IAAIA,OAAO,GAAG,EAAd,EAAkB;AACvB,WAAO,wBAAP;AACD,GAFM,MAEA,IAAIG,OAAO,GAAG,EAAd,EAAkB;AACvB,WAAQ,GAAEA,OAAQ,cAAlB;AACD,GAFM,MAEA,IAAIC,OAAJ,EAAa;AAClB,WAAO,OAAP;AACD,GAFM,MAEA,IAAIE,WAAJ,EAAiB;AACtB,WAAO,KAAP;AACD,GAFM,MAEA,IAAIC,UAAJ,EAAgB;AACrB,WAAQE,gBAAgB,CAACd,IAAD,CAAxB;AACD;;AAED,SAAO,kBAAP;AACD;AAED,MAAMe,WAAW,GAAG,CAClB,MADkB,EAElB,OAFkB,EAGlB,MAHkB,EAIlB,OAJkB,EAKlB,OALkB,EAMlB,SANkB,EAOlB,QAPkB,EAQlB,SARkB,EASlB,OATkB,EAUlB,MAVkB,EAWlB,OAXkB,EAYlB,QAZkB,CAApB;;AAeA,SAASD,gBAAT,CAA0Bd,IAA1B,EAAgC;AAC9B,QAAMgB,GAAG,GAAGhB,IAAI,CAACiB,OAAL,EAAZ;AACA,QAAMC,KAAK,GAAGH,WAAW,CAACf,IAAI,CAACmB,QAAL,EAAD,CAAzB;AACA,QAAMC,IAAI,GAAGpB,IAAI,CAACa,WAAL,EAAb;AACA,QAAMQ,KAAK,GAAGrB,IAAI,CAACsB,QAAL,EAAd;AACA,MAAId,OAAO,GAAGR,IAAI,CAACuB,UAAL,EAAd;;AAEA,MAAIf,OAAO,GAAG,EAAd,EAAkB;AAChB;AACAA,IAAAA,OAAO,GAAI,IAAGA,OAAQ,EAAtB;AACD;;AAEC,SAAQ,GAAEQ,GAAI,KAAIE,KAAM,IAAGG,KAAM,IAAGb,OAAQ,EAA5C;AACH","sourcesContent":["export function timeAgo(time) {\r\n  if (!time) {\r\n    return null;\r\n  }\r\n\r\n  const date = typeof time === \"object\" ? time : new Date(time);\r\n  const DAY_IN_MS = 86400000; // 24 * 60 * 60 * 1000\r\n  const today = new Date();\r\n  const yesterday = new Date(today - DAY_IN_MS);\r\n  const seconds = Math.round((today - date) / 1000);\r\n  const minutes = Math.round(seconds / 60);\r\n  const isToday = today.toDateString() === date.toDateString();\r\n  const isYesterday = yesterday.toDateString() === date.toDateString();\r\n  const isThisYear = today.getFullYear() === date.getFullYear();\r\n\r\n  if (seconds < 5) {\r\n    return \"şimdi\";\r\n  } else if (seconds < 60) {\r\n    return `${seconds} saniye önce`;\r\n  } else if (seconds < 90) {\r\n    return \"yaklaşık 1 dakika önce\";\r\n  } else if (minutes < 60) {\r\n    return `${minutes} dakika önce`;\r\n  } else if (isToday) {\r\n    return \"bugün\";\r\n  } else if (isYesterday) {\r\n    return \"dün\";\r\n  } else if (isThisYear) {\r\n    return  getFormattedDate(date);\r\n  }\r\n\r\n  return \"bir seneden önce\";\r\n}\r\n\r\nconst MONTH_NAMES = [\r\n  \"Ocak\",\r\n  \"Şubat\",\r\n  \"Mart\",\r\n  \"Nisan\",\r\n  \"Mayıs\",\r\n  \"Haziran\",\r\n  \"Temmuz\",\r\n  \"Ağustos\",\r\n  \"Eylül\",\r\n  \"Ekim\",\r\n  \"Kasım\",\r\n  \"Aralık\"\r\n];\r\n\r\nfunction getFormattedDate(date) {\r\n  const day = date.getDate();\r\n  const month = MONTH_NAMES[date.getMonth()];\r\n  const year = date.getFullYear();\r\n  const hours = date.getHours();\r\n  let minutes = date.getMinutes();\r\n\r\n  if (minutes < 10) {\r\n    // Adding leading zero to minutes\r\n    minutes = `0${minutes}`;\r\n  }\r\n  \r\n    return `${day}. ${month} ${hours}:${minutes}`;\r\n}"]},"metadata":{},"sourceType":"module"}