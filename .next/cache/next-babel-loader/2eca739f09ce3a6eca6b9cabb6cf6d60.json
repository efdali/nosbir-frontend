{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nexport var FETCHING_COMMENTS = \"FETCHING_COMMENTS\";\nexport var fetchingComments = function fetchingComments() {\n  return {\n    type: FETCHING_COMMENTS\n  };\n};\nexport var COMMENTS_FAIL = \"COMMENTS_FAIL\";\nexport var commentsFail = function commentsFail(msg) {\n  return {\n    type: COMMENTS_FAIL,\n    msg: msg\n  };\n};\nexport var COMMENTS_SUCCESS = \"COMMENTS_SUCCESS\";\nexport var commentsSuccess = function commentsSuccess(comments, total) {\n  return {\n    type: COMMENTS_SUCCESS,\n    comments: comments,\n    total: total\n  };\n};\nexport var fetchPostDetails = function fetchPostDetails(seo) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState, http) {\n        var post;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return http.get(\"post_detay.php\", {\n                  params: {\n                    link: seo\n                  }\n                }).then(function (res) {\n                  return res.data;\n                }).then(function (res) {\n                  if (res.durum) {\n                    dispatch(commentsSuccess(res.yorum.data, res.yorum.sayi));\n                    return res.post;\n                  } else {\n                    dispatch(commentsFail(res.mesaj));\n                    return {};\n                  }\n                })[\"catch\"](function (err) {\n                  return commentsFail(err);\n                });\n\n              case 2:\n                post = _context.sent;\n                return _context.abrupt(\"return\", post);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var ADD_COMMENT = \"ADD_COMMENT\";\nexport var addComment = function addComment(newComment) {\n  return {\n    type: ADD_COMMENT,\n    newComment: newComment\n  };\n};\nexport var shareComment = function shareComment(comment, postId) {\n  return function (dispatch, getState, http) {\n    http.post(\"yorum_ekle.php\", {\n      icerik: comment,\n      postId: postId\n    }).then(function (res) {\n      return res.data;\n    }).then(function (res) {\n      console.log(res);\n\n      if (res.durum) {\n        var newComment = {\n          text: comment,\n          created_at: _Date$now(),\n          nick: getState().auth.user.kadi\n        };\n        dispatch(addComment(newComment));\n      } else {\n        console.log(\"hata\");\n      }\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["E:/projects/nosbir-frontend/store/actions/commentActions.js"],"names":["FETCHING_COMMENTS","fetchingComments","type","COMMENTS_FAIL","commentsFail","msg","COMMENTS_SUCCESS","commentsSuccess","comments","total","fetchPostDetails","seo","dispatch","getState","http","get","params","link","then","res","data","durum","yorum","sayi","post","mesaj","err","ADD_COMMENT","addComment","newComment","shareComment","comment","postId","icerik","console","log","text","created_at","nick","auth","user","kadi"],"mappings":"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","sourcesContent":["export const FETCHING_COMMENTS = \"FETCHING_COMMENTS\";\r\nexport const fetchingComments = () => ({ type: FETCHING_COMMENTS });\r\n\r\nexport const COMMENTS_FAIL = \"COMMENTS_FAIL\";\r\nexport const commentsFail = msg => ({ type: COMMENTS_FAIL, msg });\r\n\r\nexport const COMMENTS_SUCCESS = \"COMMENTS_SUCCESS\";\r\nexport const commentsSuccess = (comments, total) => ({\r\n  type: COMMENTS_SUCCESS,\r\n  comments,\r\n  total\r\n});\r\n\r\nexport const fetchPostDetails = seo => async (dispatch, getState, http) => {\r\n  const post = await http\r\n    .get(\"post_detay.php\", {\r\n      params: {\r\n        link: seo\r\n      }\r\n    })\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      if (res.durum) {\r\n        dispatch(commentsSuccess(res.yorum.data, res.yorum.sayi));\r\n        return res.post;\r\n      } else {\r\n        dispatch(commentsFail(res.mesaj));\r\n        return {};\r\n      }\r\n    })\r\n    .catch(err => commentsFail(err));\r\n  return post;\r\n};\r\n\r\nexport const ADD_COMMENT=\"ADD_COMMENT\";\r\nexport const addComment=newComment=>({type:ADD_COMMENT,newComment});\r\nexport const shareComment = (comment, postId) => (dispatch, getState, http) => {\r\n  http\r\n    .post(\"yorum_ekle.php\", {\r\n      icerik: comment,\r\n      postId: postId\r\n    })\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      console.log(res);\r\n      if (res.durum) {\r\n        const newComment = {\r\n          text: comment,\r\n          created_at: Date.now(),\r\n          nick: getState().auth.user.kadi\r\n        };\r\n        dispatch(addComment(newComment));\r\n      }else{\r\n        console.log(\"hata\");\r\n      }\r\n    })\r\n    .catch(err=>console.log(err));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}